{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\John Perkins\\\\Documents\\\\Coding\\\\Projects\\\\job-bored\\\\jobBored\\\\src\\\\pages\\\\TestForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { Styles } from \"../pages/styles\";\nimport { Formik, useField } from \"formik\";\nimport * as Yup from \"yup\";\n\nconst CustomTextInput = ({\n  label,\n  ...props\n}) => {\n  _s();\n\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"lable\", {\n      htmlFor: props.id || props.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"test-input\",\n      ...field,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true);\n};\n\n_s(CustomTextInput, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c = CustomTextInput;\nexport default function TestForm() {\n  return /*#__PURE__*/_jsxDEV(Styles, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        name: \"\",\n        email: \"\",\n        acceptedTerms: false,\n        superPower: ''\n      },\n      validationSchema: Yip.object({\n        name: Yup.String().min(3, \"Must be at least 3 characters\").max(15, \"Must be 15 characters or less\").required(\"Required\"),\n        email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n        acceptedTerms: Yup.boolean().required(\"Required\").oneOf([true], \"You must accept the terms and conditions\"),\n        superPower: Yup.string().oneOf([\"flight\", \"invisibility\", \"other\"], \"Invalid dream\").required(\"Required\")\n      }),\n      children: [\"onSubmit = \", (values, {\n        setSubmitting,\n        resetForm\n      }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          resetForm();\n          setSubmitting(false);\n        }, 3000);\n      }]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n_c2 = TestForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CustomTextInput\");\n$RefreshReg$(_c2, \"TestForm\");","map":{"version":3,"sources":["C:/Users/John Perkins/Documents/Coding/Projects/job-bored/jobBored/src/pages/TestForm.js"],"names":["React","useState","axios","makeStyles","TextField","Button","Styles","Formik","useField","Yup","CustomTextInput","label","props","field","meta","id","name","touched","error","TestForm","email","acceptedTerms","superPower","Yip","object","String","min","max","required","string","boolean","oneOf","values","setSubmitting","resetForm","setTimeout","alert","JSON","stringify"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,sCAAP;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAAQC,MAAR,QAAqB,iBAArB;AACA,SAAQC,MAAR,EAAgBC,QAAhB,QAA+B,QAA/B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;;AAGA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAAS,KAAGC;AAAZ,CAAD,KAAwB;AAAA;;AAC5C,QAAM,CAACC,KAAD,EAAQC,IAAR,IAAgBN,QAAQ,CAACI,KAAD,CAA9B;AAEA,sBACI;AAAA,4BACI;AAAO,MAAA,OAAO,EAAEA,KAAK,CAACG,EAAN,IAAYH,KAAK,CAACI,IAAlC;AAAA,gBAAyCL;AAAzC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,SAAS,EAAC,YAAjB;AAAA,SAAkCE,KAAlC;AAAA,SAA4CD;AAA5C;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGKE,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACI,KAArB,gBACG;AAAK,MAAA,SAAS,EAAG,OAAjB;AAAA,gBAA0BJ,IAAI,CAACI;AAA/B;AAAA;AAAA;AAAA;AAAA,YADH,GAEE,IALP;AAAA,kBADJ;AASH,CAZD;;GAAMR,e;UACoBF,Q;;;KADpBE,e;AAeN,eAAe,SAASS,QAAT,GAAmB;AAC9B,sBACI,QAAC,MAAD;AAAA,2BACI,QAAC,MAAD;AACI,MAAA,aAAa,EAAE;AACXH,QAAAA,IAAI,EAAE,EADK;AAEXI,QAAAA,KAAK,EAAE,EAFI;AAGXC,QAAAA,aAAa,EAAE,KAHJ;AAIXC,QAAAA,UAAU,EAAE;AAJD,OADnB;AAOI,MAAA,gBAAgB,EACZC,GAAG,CAACC,MAAJ,CAAW;AACPR,QAAAA,IAAI,EAAEP,GAAG,CAACgB,MAAJ,GACDC,GADC,CACG,CADH,EACM,+BADN,EAEDC,GAFC,CAEG,EAFH,EAEO,+BAFP,EAGDC,QAHC,CAGQ,UAHR,CADC;AAKPR,QAAAA,KAAK,EAAEX,GAAG,CAACoB,MAAJ,GACFT,KADE,CACI,eADJ,EAEFQ,QAFE,CAEO,UAFP,CALA;AAQPP,QAAAA,aAAa,EAAEZ,GAAG,CAACqB,OAAJ,GACVF,QADU,CACD,UADC,EAEVG,KAFU,CAEJ,CAAC,IAAD,CAFI,EAEI,0CAFJ,CARR;AAWPT,QAAAA,UAAU,EAAEb,GAAG,CAACoB,MAAJ,GACPE,KADO,CACD,CAAC,QAAD,EAAW,cAAX,EAA2B,OAA3B,CADC,EACoC,eADpC,EAEPH,QAFO,CAEE,UAFF;AAXL,OAAX,CARR;AAAA,gCAwBY,CAACI,MAAD,EAAS;AAACC,QAAAA,aAAD;AAAgBC,QAAAA;AAAhB,OAAT,KAAwC;AAChDC,QAAAA,UAAU,CAAC,MAAM;AACbC,UAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeN,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AACAE,UAAAA,SAAS;AACTD,UAAAA,aAAa,CAAC,KAAD,CAAb;AACH,SAJS,EAIP,IAJO,CAAV;AAKH,OA9BD;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAuCF;MAxCsBd,Q","sourcesContent":["import React, { useState} from 'react';\r\nimport axios from 'axios';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Styles} from \"../pages/styles\"\r\nimport {Formik, useField} from \"formik\";\r\nimport * as Yup from \"yup\"\r\n\r\n\r\nconst CustomTextInput = ({ label, ...props}) => {\r\n    const [field, meta] = useField(props);\r\n\r\n    return(\r\n        <>\r\n            <lable htmlFor={props.id || props.name}>{label}</lable>\r\n            <input className=\"test-input\" {...field}{...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <div className = \"error\">{meta.error}</div>\r\n            ): null }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default function TestForm(){\r\n    return(\r\n        <Styles>\r\n            <Formik\r\n                initialValues={{\r\n                    name: \"\",\r\n                    email: \"\",\r\n                    acceptedTerms: false,\r\n                    superPower: '',\r\n                }}\r\n                validationSchema={\r\n                    Yip.object({\r\n                        name: Yup.String()\r\n                            .min(3, \"Must be at least 3 characters\")\r\n                            .max(15, \"Must be 15 characters or less\")\r\n                            .required(\"Required\"),\r\n                        email: Yup.string()\r\n                            .email(\"Invalid email\")\r\n                            .required(\"Required\"),\r\n                        acceptedTerms: Yup.boolean()\r\n                            .required(\"Required\")\r\n                            .oneOf([true], \"You must accept the terms and conditions\"),\r\n                        superPower: Yup.string()\r\n                            .oneOf([\"flight\", \"invisibility\", \"other\"], \"Invalid dream\")\r\n                            .required(\"Required\")\r\n                })}\r\n            >\r\n            onSubmit = {(values, {setSubmitting, resetForm}) => {\r\n                setTimeout(() => {\r\n                    alert(JSON.stringify(values, null, 2))\r\n                    resetForm();\r\n                    setSubmitting(false)\r\n                }, 3000)\r\n            }}\r\n\r\n\r\n            </Formik>\r\n        </Styles>\r\n\r\n    )\r\n }"]},"metadata":{},"sourceType":"module"}